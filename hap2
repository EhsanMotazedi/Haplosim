#!/bin/bash
# A wrapper for SDhaP polyploid haplotyping software (Das and Vikalo 2015).
# Written by Ehsan Motazedi, Wageningen UR, 24 Dec 2015.
usage(){
    echo 'Usage: hap2 [-h, --help] -f, --infile <SNP-fragment file> -o, --output <output (base) name>'
    echo '                         -p, --ploidy  <ploidy level> -v, --vcf <VCF file>'
} 
display_help(){
echo 'Program to estimate the polyploid haplotypes from an SNP-fragment file, using SDhaP polyploid algorithm (Das and Vikalo 2015). Two files will be'
echo 'generated: the original haplotype estimate provided by SDhaP ("hap" script), in which alleles are coded as 1, 2, 3,... ("output" file), as well'
echo 'as its modified version ("output_Converted" file) in which alleles are coded as 0, 1, 2,... and an additional column has been added that contains'
echo 'the position of each SNP extracted from the VCF file. The numbering of the SNPs is also changed in "output_Converted" so that it starts from 1'
echo 'instead of 0.'      
usage
echo 
echo 'where:'
echo '    -h, --help      show this help text'
echo '    -f, --infile    the fragment file containing the SNP fragments obtained from original bam and VCF files (output of FragmentPoly.py)'
echo '    -o, --output    the name of the output file and the base name of output_Converted file'
echo '    -p, --ploidy    the ploidy level of the sequenced organism'
echo '    -v, --vcf       the VCF file containing the variant information of the reads (output of e.g. freebayes)'
}    

declare -i nargs=0

while [ "$1" != "" ]; do
case "$1" in
    -h|--help)     display_help
       	           exit 0
		   ;;	
    -f|--infile)   shift
		   FRAG=$1
 		   shift
                   nargs=$((nargs+1))
		   ;; 
    -o|--output)   shift
		   OUTPUT=$1
		   shift 
                   nargs=$((nargs+1))
		   ;;
    -p|--ploidy)   shift
		   PLOIDY=$1
		   test $PLOIDY -eq $PLOIDY 2> /dev/null
		   if [ $? != 0 ]; then
		       printf "ERROR: invalid argument %s passed to -p, --ploidy.\n" $1 1>&2
       		       1>&2 usage
                       exit 1
		   fi
		   shift
                   nargs=$((nargs+1))
		   ;; 
    -v|--vcf)      shift
		   VCF=$1
		   shift
                   nargs=$((nargs+1))
                   ;;
    *) printf "ERROR: invalid argument %s.\n" $1 1>&2
       1>&2 usage
       exit 1
       ;;
  esac
done

if [ $nargs -lt 4 ]
then
  1>&2 echo 'ERROR: too few arguments!'
  1>&2 usage
  exit 1
fi

if [ $nargs -gt 4 ]
then
  1>&2 echo 'ERROR: too many arguments!'
  1>&2 usage
  exit 1
fi

if ! [ -f $FRAG ]; then
    1>&2 echo 'ERROR: the fragment file does not exist!'
    exit 1
elif ! [ -f $VCF ]; then
    1>&2 echo 'ERROR: the VCF file does not exist!'
    exit 1
elif [ "$(expr "$PLOIDY" : '^[0-9]\+$')" = "0" ] || [ "$PLOIDY" = "0" ]; then
    1>&2 echo 'ERROR: invalid ploidy level! Must be a positive integer!'
    exit 1
fi
if [ $PLOIDY -gt 2 ];then
    if [ -z "$SDhaPPath" ]; then
        hap $FRAG $OUTPUT $PLOIDY & pid_hap=$!
    else
        $SDhaPPath"/hap" $FRAG $OUTPUT $PLOIDY & pid_hap=$!
    fi
else # Use the diploid version of SDhaP if ploidy level is 2
    if [ -z "$SDhaPPath" ]; then
        hap $FRAG $OUTPUT $PLOIDY & pid_hap=$!
    else
	SDhaPPath=${SDhaPPath%\/}
        "${SDhaPPath%\/SDhaP_poly}/hap" $FRAG $OUTPUT $PLOIDY & pid_hap=$!
    fi
fi
wait $pid_hap
status=$?
if [ $status == 139 ]; then
    1>&2 printf '\nERROR: failed to run SDhaP!\n'
    kill -s SIGSEGV $$  
elif [ $status == 143 ]; then 
    1>&2 printf '\nERROR: failed to run SDhaP!\n'
    kill -s SIGTERM $$
elif [ $status == 130 ]; then
    1>&2 printf '\nERROR: failed to run SDhaP!\n'
    kill -s SIGINT $$
fi
ConvertAllelesSDhaP.py -p $OUTPUT -o ${OUTPUT}_Converted -v ${VCF}
exit $?
